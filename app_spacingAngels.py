import streamlit as st
import pandas as pd
import plotly.express as px
import altair as alt
import sqlite3
from streamlit_option_menu import option_menu


# Titre de la page
st.set_page_config(page_title="SpangApp", page_icon="logo_spacing_angels.jpg", layout="wide")

# En-t√™te de la page
st.markdown(
    """
    <div style='background-color:#F63366;padding:10px'>
        <h2 style='color:white;text-align:center;'>	üöó SpangApp - Suivi des v√©hicules üöó</h2>
    </div>
    """,
    unsafe_allow_html=True,
)

# Connexion √† la base de donn√©es
conn = sqlite3.connect('app_spacingAngelsBDD_generated.db')

# Ex√©cution de requ√™tes SQL pour extraire des donn√©es de la table
iteration_df = pd.read_sql_query("SELECT * FROM iteration", conn)
plate_box_df = pd.read_sql_query("SELECT * FROM plate_box", conn)
run_parameters_df = pd.read_sql_query("SELECT * FROM run_parameters", conn)
travel_df = pd.read_sql_query("SELECT * FROM travel", conn)

# Menu de navigation lat√©ral

with st.sidebar:
    selected = option_menu("Menu", ["üè† Accueil", "üìãTableau de bord", "üåç Carte", "üìà Graphique", "üìä Statistiques"], 
        default_index=0)
    

if selected == "üè† Accueil":

    image = 'image_home.jpg'
    st.image(image, use_column_width=True, width=500)

    st.markdown("""
        <style>
        .big-font {
            font-size:25px !important;
        }
        </style>
        """, unsafe_allow_html=True)

    st.markdown("""<p class="big-font"> La s√©curit√© routi√®re est une pr√©occupation majeure pour les gouvernements et les entreprises du monde entier. Chaque ann√©e, les accidents de la route causent des milliers de morts et de bless√©s, ce qui repr√©sente un co√ªt √©lev√© en termes humains, √©conomiques et sociaux. Dans ce contexte, le d√©veloppement de nouvelles technologies pour am√©liorer la s√©curit√© routi√®re est crucial pour notre soci√©t√©. </p>""", unsafe_allow_html=True)
    st.markdown("""<p class="big-font"> Parmi les accidents les plus fr√©quents, les collisions arri√®res repr√©sentent une menace particuli√®rement importante. C'est pourquoi Baucher Etudes & Conseils (BEC), une startup sp√©cialis√©e dans la conception et l'√©tude de produits innovants pour la s√©curit√© routi√®re, a d√©velopp√© le radar p√©dagogique autonome Spacing Angels. Cette solution permet de pr√©venir les collisions arri√®res en alertant les conducteurs des v√©hicules de la proximit√© des autres v√©hicules. Avec Spacing Angels, BEC offre une solution efficace et facile √† utiliser pour am√©liorer la s√©curit√© routi√®re. </p>""", unsafe_allow_html=True)

elif selected == "üìãTableau de bord":
    st.markdown("<div style='text-align:center'><h2>Tableau de bord</h2></div>", unsafe_allow_html=True)
    st.write(
        """
        Voici les donn√©es des diff√©rentes tables de la base de donn√©es.
        """
    )
    
    # Menu d√©roulant pour s√©lectionner les donn√©es √† afficher
    options = ['Iteration', 'Plate Box', 'Run Parameters', 'Travel']
    selection = st.selectbox('S√©lectionnez les donn√©es √† afficher', options)

    # Chargement des donn√©es s√©lectionn√©es
    if selection == 'Iteration':
        data = iteration_df
    elif selection == 'Plate Box':
        data = plate_box_df
    elif selection == 'Run Parameters':
        data = run_parameters_df
    else:
        data = travel_df

    # Affichage des donn√©es
    st.write(data)

elif selected == "üåç Carte":
    st.markdown("<div style='text-align:center'><h2>Carte</h2></div>", unsafe_allow_html=True)
    st.write(
        """
        Voici la carte des positions des v√©hicules et le trac√© de leurs itin√©raires.
        """
    )

    # Cr√©er une liste des identifiants de voyage uniques
    travel_ids = iteration_df['travel_id'].unique().tolist()

    # Menu d√©roulant pour s√©lectionner le voyage √† afficher
    selected_travel_id = st.selectbox('S√©lectionnez le voyage √† afficher', travel_ids)

    # Filtrer les donn√©es pour le voyage s√©lectionn√© et trier par ordre chronologique
    travel_data = iteration_df.loc[iteration_df['travel_id'] == selected_travel_id].sort_values('timestamp')

    # Extraire les coordonn√©es de la premi√®re et de la derni√®re it√©ration de l'itin√©raire
    start_coords = [travel_data.iloc[0]['latitude'], travel_data.iloc[0]['longitude']]
    end_coords = [travel_data.iloc[-1]['latitude'], travel_data.iloc[-1]['longitude']]

    # Cr√©er une liste de coordonn√©es pour le trac√© de ligne sur la carte
    line_coords = [start_coords] + travel_data.iloc[1:-1][['latitude', 'longitude']].values.tolist() + [end_coords]

    # Afficher la carte des positions des v√©hicules pour le voyage s√©lectionn√© avec le trac√© de ligne
    fig = px.scatter_mapbox(travel_data, lat='latitude', lon='longitude', zoom=10)
    fig.update_layout(mapbox_style="open-street-map")
    fig.add_trace(px.line_mapbox(lat=[coord[0] for coord in line_coords], lon=[coord[1] for coord in line_coords]).data[0])
    st.plotly_chart(fig)

elif selected == "üìà Graphique":
    # R√©cup√©rer les donn√©es de temps et de distance √† partir de la dataframe iteration
    timestamps = iteration_df['timestamp'].values.tolist()
    distances = iteration_df['distance'].cumsum().values.tolist()

    # Cr√©er une dataframe pour le graphique
    df_graphique = pd.DataFrame({'timestamp': timestamps, 'distance': distances})

    # Tracer le graphique
    graphique = alt.Chart(df_graphique).mark_line().encode(
        x='timestamp:T',
        y='distance:Q'
    ).properties(
        width=700,
        height=400,
        title='Distance parcourue en fonction du temps'
    )

    # Afficher le graphique dans l'application Streamlit
    st.markdown("<h2 style='text-align: center'>Graphique de la distance parcourue</h2>", unsafe_allow_html=True)
    st.altair_chart(graphique, use_container_width=True)

    

elif selected == "üìä Statistiques":
    # Afficher les histogrammes sur la m√™me ligne
    col1, col2 = st.columns(2)

    # Afficher un histogramme de la vitesse moyenne par voyage dans la premi√®re colonne
    with col1:
        st.markdown("<h2 style='text-align: center'>Histogramme de la vitesse moyenne par voyage</h2>", unsafe_allow_html=True)
        avg_speed_by_travel = iteration_df.groupby('travel_id').mean(numeric_only=True)['speed']
        fig = px.histogram(avg_speed_by_travel, x='speed', nbins=20)
        st.plotly_chart(fig)

    # Afficher un histogramme de la vitesse des v√©hicules ayant une plaque d√©tect√©e dans la deuxi√®me colonne
    with col2:
        st.markdown("<h2 style='text-align: center'>R√©partition des plaques detect√©es en fonction de la vitesse du v√©hicule</h2>", unsafe_allow_html=True)
        # Filtrer les it√©rations o√π une plaque d'immatriculation a √©t√© d√©tect√©e
        detections = iteration_df[iteration_df["status"] == "PlateDetected"]
        # Cr√©er un histogramme de la vitesse des v√©hicules ayant une plaque d√©tect√©e
        histogram = alt.Chart(detections).mark_bar().encode( x=alt.X("speed", bin=True), y="count()" ).properties( width=700, height=400 )
        # Afficher le graphique
        st.altair_chart(histogram)

